global:
  image:
    repository: ${QUAY_IMAGE_REPO}/argoproj/argocd
server:
  service:
    type: NodePort
  extraArgs:
    - --insecure
  configEnabled: true
  config:
    repositories: |
      - type: git
        url: ${DECAPOD_BOOTSTRAP_GIT_REPO_URL}
    resource.customizations: |
      jaegertracing.io/Jaeger:
        ignoreDifferences: |
          jsonPointers:
          - /spec/collector/resources
        health.lua: |
          health_status = {}
          health_status.status = "Healthy"
          health_status.message = "Jaeger Controlplane is Running"
          return health_status
      cluster.x-k8s.io/MachinePool:
        ignoreDifferences: |
          jsonPointers:
          - /spec/replicas
      cluster.x-k8s.io/MachineDeployment:
        ignoreDifferences: |
          jsonPointers:
          - /spec/replicas
        health.lua: |
          hs = {}
          if obj.spec ~= nil and obj.status ~= nil then
            if obj.spec.replicas == obj.status.replicas then
              hs.status = "Healthy"
              hs.message = "All machines targeted by this deployment were created"
              return hs
            end
          end

          hs.status = "Progressing"
          hs.message = "Waiting for machines for this deployment"
          return hs
      monitoring.coreos.com/Prometheus:
        health.lua: |
          health_status = {}
          health_status.status = "Healthy"
          health_status.message = "Prometheus is deployed"
          return health_status
    resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |
      jqPathExpressions:
      - '.webhooks[]?.clientConfig.caBundle'
      - '.webhooks[]?.failurePolicy'
    resource.customizations.ignoreDifferences.admissionregistration.k8s.io_ValidatingWebhookConfiguration: |
      jqPathExpressions:
      - '.webhooks[]?.clientConfig.caBundle'
      - '.webhooks[]?.failurePolicy'
  metrics:
    enabled: true
dex:
  image:
    repository: ${GITHUB_IMAGE_REPO}/dexidp/dex
  metrics:
    enabled: true
redis:
  image:
    repository: ${DOCKER_IMAGE_REPO}/library/redis
controller:
  metrics:
    enabled: true
repoServer:
  metrics:
    enabled: true
redis-ha.haproxy:
  metrics:
    enabled: true
